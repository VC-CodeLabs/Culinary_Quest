package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
)

func main() {
	generateRandMaxTestCase()
}

////////////////////////////////////////////////////////////////////
// define the input

type MenuItem struct {
	Name         string   `json:"name"`
	Cost         int      `json:"cost"`
	Satisfaction int      `json:"satisfaction"`
	Category     string   `json:"category"`
	Ingredients  []string `json:"ingredients"`
	Calories     int      `json:"calories"`
}

type Menu struct {
	Foods  []MenuItem `json:"foods"`
	Budget int        `json:"budget"`
}

func generateRandMaxTestCase() {

	// generates a randomized test case with a guaranteed result
	const MAX_FOODS_BY_CATEGORY = 50
	const TARGET_BUDGET = 100
	const TARGET_CALORIES = 1100

	// assemble lists of all possible values 1...MAX for cost and satisfaction
	cost := make([]int, MAX_FOODS_BY_CATEGORY)
	satd := make([]int, MAX_FOODS_BY_CATEGORY)
	for r := 0; r < MAX_FOODS_BY_CATEGORY; r++ {
		cost[r] = r + 1
		satd[r] = r + 1
	}

	// assemble lists of all possible costs and satisfaction 1...MAX by category
	appsCost := append(make([]int, 0), cost...)
	appsSatd := append(make([]int, 0), satd...)

	drnkCost := append(make([]int, 0), cost...)
	drnkSatd := append(make([]int, 0), satd...)

	mainCost := append(make([]int, 0), cost...)
	mainSatd := append(make([]int, 0), satd...)

	dessCost := append(make([]int, 0), cost...)
	dessSatd := append(make([]int, 0), satd...)

	// yes, strings.Title is deprecated, but works fine for us
	appsTitle := "Appetizer"   // strings.Title(APPETIZER)
	drnkTitle := "Drink"       // strings.Title(DRINK)
	mainTitle := "Main Course" // strings.Title(MAIN_COURSE)
	dessTitle := "Dessert"     // strings.Title(DESSERT)

	appsBaseIngredients := []string{"spinach", "cream cheese", "garlic", "bread", "tomatoes", "basil"}
	drnkBaseIngredients := []string{"water", "sugar", "carbon dioxide", "barley", "hops"}
	mainBaseIngredients := []string{"beef", "salt", "pepper", "broccoli", "carrots", "peppers", "soy sauce"}
	dessBaseIngredients := []string{"cream cheese", "sugar", "eggs", "crust", "apples", "flour", "butter"}

	foods := make([]MenuItem, 0)

	for i := 0; i < MAX_FOODS_BY_CATEGORY; i++ {

		itemsLeft := MAX_FOODS_BY_CATEGORY - i
		tailNdx := itemsLeft - 1

		//
		// for each category, generate a unique random cost and satisfaction 1...MAX;
		// food items have obviously fake names unless they're max satisfaction,
		// in which case their name matches the BestMeal answer for Alek's sample
		//

		{
			appsItem := MenuItem{fmt.Sprintf(appsTitle+"%d", i+1), 0, 0, appsTitle, nil, 0}

			{
				randNdx := rand.Intn(itemsLeft) // 0...itemsLeft-1
				// randCost := appsCost[randNdx]
				// swap in item from shrinking tail index
				appsCost[randNdx], appsCost[tailNdx] = appsCost[tailNdx], appsCost[randNdx]
				appsItem.Cost = 1 // randCost
			}

			{
				randNdx := rand.Intn(itemsLeft)
				randSatd := appsSatd[randNdx]
				// swap in item from shrinking tail index
				appsSatd[randNdx], appsSatd[tailNdx] = appsSatd[tailNdx], appsSatd[randNdx]
				appsItem.Satisfaction = randSatd

				appsItem.Ingredients = make([]string, 0)
				baseIngr := append(make([]string, 0), appsBaseIngredients...)
				randIngr := 2 + rand.Intn(len(baseIngr)-2)
				for i := 0; i < randIngr; i++ {
					randIngrNdx := rand.Intn(len(baseIngr))
					appsItem.Ingredients = append(appsItem.Ingredients, baseIngr[randIngrNdx])
					baseIngr = append(baseIngr[:randIngrNdx], baseIngr[randIngrNdx+1:]...)
				}

				appsItem.Calories = 1 // 500 + rand.Intn(500)

				if randSatd == MAX_FOODS_BY_CATEGORY {
					appsItem.Name = "Fried Calamari "
					appsItem.Ingredients = []string{"calamari", "flour", "oil"}
					appsItem.Cost = TARGET_BUDGET / 4
					appsItem.Calories = TARGET_CALORIES / 4
				}
			}

			foods = append(foods, appsItem)

		}

		{
			drnkItem := MenuItem{fmt.Sprintf(drnkTitle+"%d", i+1), 0, 0, drnkTitle, nil, 0}

			{
				randNdx := rand.Intn(itemsLeft)
				// randCost := drnkCost[randNdx]
				drnkCost[randNdx], drnkCost[tailNdx] = drnkCost[tailNdx], drnkCost[randNdx]
				drnkItem.Cost = 1 // randCost
			}

			{
				randNdx := rand.Intn(itemsLeft)
				randSatd := drnkSatd[randNdx]
				drnkSatd[randNdx], drnkSatd[tailNdx] = drnkSatd[tailNdx], drnkSatd[randNdx]
				drnkItem.Satisfaction = randSatd

				drnkItem.Ingredients = make([]string, 0)
				baseIngr := append(make([]string, 0), drnkBaseIngredients...)
				randIngr := 2 + rand.Intn(len(baseIngr)-2)
				for i := 0; i < randIngr; i++ {

					randIngrNdx := rand.Intn(len(baseIngr))
					drnkItem.Ingredients = append(drnkItem.Ingredients, baseIngr[randIngrNdx])
					baseIngr = append(baseIngr[:randIngrNdx], baseIngr[randIngrNdx+1:]...)
				}

				drnkItem.Calories = 1 // 500 + rand.Intn(500)

				if randSatd == MAX_FOODS_BY_CATEGORY {
					drnkItem.Name = "Coffee"
					drnkItem.Ingredients = []string{"coffee beans", "water"}
					drnkItem.Cost = TARGET_BUDGET / 4
					drnkItem.Calories = TARGET_CALORIES / 4
				}
			}

			foods = append(foods, drnkItem)
		}

		{
			mainItem := MenuItem{fmt.Sprintf(mainTitle+"%d", i+1), 0, 0, mainTitle, nil, 0}

			{
				randNdx := rand.Intn(itemsLeft)
				// randCost := mainCost[randNdx]
				mainCost[randNdx], mainCost[tailNdx] = mainCost[tailNdx], mainCost[randNdx]
				mainItem.Cost = 1 // randCost
			}

			{
				randNdx := rand.Intn(itemsLeft)
				randSatd := mainSatd[randNdx]
				mainSatd[randNdx], mainSatd[tailNdx] = mainSatd[tailNdx], mainSatd[randNdx]
				mainItem.Satisfaction = randSatd

				mainItem.Ingredients = make([]string, 0)
				baseIngr := append(make([]string, 0), mainBaseIngredients...)
				randIngr := 2 + rand.Intn(len(baseIngr)-2)
				for i := 0; i < randIngr; i++ {
					randIngrNdx := rand.Intn(len(baseIngr))
					mainItem.Ingredients = append(mainItem.Ingredients, baseIngr[randIngrNdx])
					baseIngr = append(baseIngr[:randIngrNdx], baseIngr[randIngrNdx+1:]...)
				}

				mainItem.Calories = 1 // 500 + rand.Intn(500)

				if randSatd == MAX_FOODS_BY_CATEGORY {
					mainItem.Name = "Salmon"
					mainItem.Ingredients = []string{"salmon", "lemon", "dill"}
					mainItem.Cost = TARGET_BUDGET / 4
					mainItem.Calories = TARGET_CALORIES / 4
				}
			}

			foods = append(foods, mainItem)
		}

		{
			dessItem := MenuItem{fmt.Sprintf(dessTitle+"%d", i+1), 0, 0, dessTitle, nil, 0}

			{
				randNdx := rand.Intn(itemsLeft)
				// randCost := dessCost[randNdx]
				dessCost[randNdx], dessCost[tailNdx] = dessCost[tailNdx], dessCost[randNdx]
				dessItem.Cost = 1 // randCost
			}

			{
				randNdx := rand.Intn(itemsLeft)
				randSatd := dessSatd[randNdx]
				dessSatd[randNdx], dessSatd[tailNdx] = dessSatd[tailNdx], dessSatd[randNdx]
				dessItem.Satisfaction = randSatd

				dessItem.Ingredients = make([]string, 0)
				if len(dessBaseIngredients) == 0 {
					panic("no ingredients??")
				}
				baseIngr := append(make([]string, 0), dessBaseIngredients...)
				randIngr := 2 + rand.Intn(len(baseIngr)-2)
				for i := 0; i < randIngr; i++ {
					randIngrNdx := rand.Intn(len(baseIngr))
					dessItem.Ingredients = append(dessItem.Ingredients, baseIngr[randIngrNdx])
					baseIngr = append(baseIngr[:randIngrNdx], baseIngr[randIngrNdx+1:]...)
				}

				dessItem.Calories = 1 // 500 + rand.Intn(500)

				if randSatd == MAX_FOODS_BY_CATEGORY {
					dessItem.Name = "Ice Cream"
					dessItem.Ingredients = []string{"milk", "sugar", "cream"}
					dessItem.Cost = TARGET_BUDGET / 4
					dessItem.Calories = TARGET_CALORIES / 4
				}
			}

			foods = append(foods, dessItem)
		}

	}

	// randomize the order of all menu items
	totalMenuItems := len(foods)

	for i := 0; i < totalMenuItems; i++ {

		itemsLeft := totalMenuItems - i
		tailNdx := itemsLeft - 1

		randNdx := rand.Intn(itemsLeft)

		if itemsLeft == tailNdx {
			continue
		}

		// swap the item at the random index with the item at the shrinking tail index

		foods[randNdx], foods[tailNdx] = foods[tailNdx], foods[randNdx]

	}

	menu := Menu{foods, MAX_FOODS_BY_CATEGORY * 4}

	json, _ := json.MarshalIndent(&menu, "", "\t")
	fmt.Println(string(json))

}
